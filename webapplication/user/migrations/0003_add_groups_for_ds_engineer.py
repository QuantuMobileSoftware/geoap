# Generated by Django 3.1 on 2020-12-08 20:01

from django.db import migrations


def add_permissions(apps, schema_editor):
    """
    Add permissions for Results, AoI models.
    :param apps:
    :param schema_editor:
    :return:
    """
    permission = apps.get_model("auth", "Permission")
    content_type = apps.get_model("contenttypes", "ContentType")

    aoi_def = apps.get_model("aoi", "AoI")
    result_def = apps.get_model("publisher", "Result")

    # Content type objects
    aoi_def_content_type = content_type.objects.get_for_model(aoi_def)
    result_def_content_type = content_type.objects.get_for_model(result_def)

    db_alias = schema_editor.connection.alias

    permissions_data = [
        {"codename": "add_aoi", "name": "Can add Area of interest", "content_type": aoi_def_content_type},
        {"codename": "change_aoi", "name": "Can change Area of interest", "content_type": aoi_def_content_type},
        {"codename": "delete_aoi", "name": "Can delete Area of interest", "content_type": aoi_def_content_type},
        {"codename": "view_aoi", "name": "Can view Area of interest", "content_type": aoi_def_content_type},
        
        {"codename": "add_result", "name": "Can add result", "content_type": result_def_content_type},
        {"codename": "change_result", "name": "Can change result", "content_type": result_def_content_type},
        {"codename": "delete_result", "name": "Can delete result", "content_type": result_def_content_type},
        {"codename": "view_result", "name": "Can view result", "content_type": result_def_content_type},
        {"codename": "view_unreleased_result", "name": "Can view unreleased result",
         "content_type": result_def_content_type
         },
    ]

    permission_list = []
    for permission_data in permissions_data:
        if not permission.objects.filter(codename=permission_data["codename"]).exists():
            permission_list.append(permission(codename=permission_data["codename"], name=permission_data["name"],
                                              content_type=permission_data["content_type"]))
    permission.objects.using(db_alias).bulk_create(permission_list)
    
    
def add_groups(apps, schema_editor):
    """
    Add 'Data science engineer' group.

    'Data science engineer' has next permissions:
    - AoI - Can add/change/delete/view permission
    - Result - Can change/view permission
    :param apps:
    :param schema_editor:
    :return:
    """
    group = apps.get_model("auth", "Group")
    permission = apps.get_model("auth", "Permission")
    user_model = apps.get_model("user", "User")
    
    db_alias = schema_editor.connection.alias

    # Adding 'Data science engineer' group
    permissions_code_names = ["add_aoi", "change_aoi", "delete_aoi", "view_aoi", "change_result", "view_result",
                              "view_unreleased_result"]
    ds_permissions = permission.objects.using(db_alias).filter(codename__in=permissions_code_names)
    ds_group, created = group.objects.get_or_create(name="Data_science_engineer")
    ds_group.permissions.set(ds_permissions)
    
    for user in user_model.objects.all():
        if user.is_staff:
            user.groups.add(ds_group)
    

class Migration(migrations.Migration):

    dependencies = [
        ('user', '0002_auto_20201105_1840'),
    ]

    operations = [
        migrations.RunPython(add_permissions),
        migrations.RunPython(add_groups)
    ]
